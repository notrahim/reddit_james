{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Techdotpk\\\\Desktop\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { FETCH_POSTS_REQUEST, FETCH_POSTS_SUCCESS, FETCH_POSTS_ERROR, FETCH_POST_REQUEST, FETCH_POST_SUCCESS, FETCH_POST_ERROR, CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_ERROR, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_ERROR, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_ERROR, DELETE_COMMENT_REQUEST, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_ERROR, VOTE_REQUEST, VOTE_SUCCESS, VOTE_ERROR } from '../actions/posts';\nvar initialState = {\n  isFetching: false,\n  items: []\n};\n\nvar updateItems = function updateItems(post, items) {\n  return items.map(function (i) {\n    return i.id === post.id ? post : i;\n  });\n};\n\nvar items;\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_POSTS_REQUEST:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        post: null,\n        newPost: null\n      });\n\n    case FETCH_POSTS_SUCCESS:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        items: action.posts\n      });\n\n    case FETCH_POSTS_ERROR:\n      return _objectSpread({}, state, {\n        isFetching: false\n      });\n\n    case FETCH_POST_REQUEST:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        newPost: null\n      });\n\n    case FETCH_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        post: action.post\n      });\n\n    case FETCH_POST_ERROR:\n      return _objectSpread({}, state, {\n        isFetching: false\n      });\n\n    case CREATE_POST_REQUEST:\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case CREATE_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        newPost: action.post\n      });\n\n    case CREATE_POST_ERROR:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: action.error\n      });\n\n    case DELETE_POST_REQUEST:\n      return _objectSpread({}, state, {\n        isDeleting: true\n      });\n\n    case DELETE_POST_SUCCESS:\n      items = state.items.filter(function (i) {\n        return i.id !== action.post;\n      });\n      return _objectSpread({}, state, {\n        isDeleting: false,\n        items: items,\n        post: null\n      });\n\n    case DELETE_POST_ERROR:\n      return _objectSpread({}, state, {\n        isDeleting: false\n      });\n\n    case CREATE_COMMENT_REQUEST:\n      return _objectSpread({}, state, {\n        isCommenting: true\n      });\n\n    case CREATE_COMMENT_SUCCESS:\n      return _objectSpread({}, state, {\n        isCommenting: false,\n        post: action.post\n      });\n\n    case CREATE_COMMENT_ERROR:\n      return _objectSpread({}, state, {\n        isCommenting: false\n      });\n\n    case DELETE_COMMENT_REQUEST:\n      return _objectSpread({}, state, {\n        isDeleting: true\n      });\n\n    case DELETE_COMMENT_SUCCESS:\n      return _objectSpread({}, state, {\n        isDeleting: false,\n        post: action.post\n      });\n\n    case DELETE_COMMENT_ERROR:\n      return _objectSpread({}, state, {\n        isDeleting: false\n      });\n\n    case VOTE_REQUEST:\n      return _objectSpread({}, state, {\n        isVoting: true\n      });\n\n    case VOTE_SUCCESS:\n      items = updateItems(action.post, state.items);\n      return _objectSpread({}, state, {\n        isVoting: false,\n        items: items,\n        post: action.post\n      });\n\n    case VOTE_ERROR:\n      return _objectSpread({}, state, {\n        isVoting: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\Techdotpk\\Desktop\\client\\src\\reducers\\posts.js"],"names":["FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","FETCH_POST_REQUEST","FETCH_POST_SUCCESS","FETCH_POST_ERROR","CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_ERROR","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_ERROR","CREATE_COMMENT_REQUEST","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_ERROR","DELETE_COMMENT_REQUEST","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_ERROR","VOTE_REQUEST","VOTE_SUCCESS","VOTE_ERROR","initialState","isFetching","items","updateItems","post","map","i","id","state","action","type","newPost","posts","error","isDeleting","filter","isCommenting","isVoting"],"mappings":"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","sourcesContent":["import {\n  FETCH_POSTS_REQUEST,\n  FETCH_POSTS_SUCCESS,\n  FETCH_POSTS_ERROR,\n  FETCH_POST_REQUEST,\n  FETCH_POST_SUCCESS,\n  FETCH_POST_ERROR,\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_ERROR,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_ERROR,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_ERROR,\n  DELETE_COMMENT_REQUEST,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_ERROR,\n  VOTE_REQUEST,\n  VOTE_SUCCESS,\n  VOTE_ERROR\n} from '../actions/posts';\n\nconst initialState = { isFetching: false, items: [] };\n\nconst updateItems = (post, items) =>\n  items.map(i => (i.id === post.id ? post : i));\n\nlet items;\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_POSTS_REQUEST:\n      return { ...state, isFetching: true, post: null, newPost: null };\n    case FETCH_POSTS_SUCCESS:\n      return { ...state, isFetching: false, items: action.posts };\n    case FETCH_POSTS_ERROR:\n      return { ...state, isFetching: false };\n\n    case FETCH_POST_REQUEST:\n      return { ...state, isFetching: true, newPost: null };\n    case FETCH_POST_SUCCESS:\n      return { ...state, isFetching: false, post: action.post };\n    case FETCH_POST_ERROR:\n      return { ...state, isFetching: false };\n\n    case CREATE_POST_REQUEST:\n      return { ...state, isFetching: true };\n    case CREATE_POST_SUCCESS:\n      return { ...state, isFetching: false, newPost: action.post };\n    case CREATE_POST_ERROR:\n      return { ...state, isFetching: false, error: action.error };\n\n    case DELETE_POST_REQUEST:\n      return { ...state, isDeleting: true };\n    case DELETE_POST_SUCCESS:\n      items = state.items.filter(i => i.id !== action.post);\n      return { ...state, isDeleting: false, items, post: null };\n    case DELETE_POST_ERROR:\n      return { ...state, isDeleting: false };\n\n    case CREATE_COMMENT_REQUEST:\n      return { ...state, isCommenting: true };\n    case CREATE_COMMENT_SUCCESS:\n      return { ...state, isCommenting: false, post: action.post };\n    case CREATE_COMMENT_ERROR:\n      return { ...state, isCommenting: false };\n\n    case DELETE_COMMENT_REQUEST:\n      return { ...state, isDeleting: true };\n    case DELETE_COMMENT_SUCCESS:\n      return { ...state, isDeleting: false, post: action.post };\n    case DELETE_COMMENT_ERROR:\n      return { ...state, isDeleting: false };\n\n    case VOTE_REQUEST:\n      return { ...state, isVoting: true };\n    case VOTE_SUCCESS:\n      items = updateItems(action.post, state.items);\n      return {\n        ...state,\n        isVoting: false,\n        items,\n        post: action.post\n      };\n    case VOTE_ERROR:\n      return { ...state, isVoting: false };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}