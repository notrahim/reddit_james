{"ast":null,"code":"export var checkMaxLength = function checkMaxLength(value, len) {\n  return value && value.length <= len ? undefined : \"must be less than \".concat(len, \" characters\");\n};\nexport var checkMinLength = function checkMinLength(value, len) {\n  return value && value.length >= len ? undefined : \"must be more than \".concat(len, \" characters\");\n};\nexport var checkValidChars = function checkValidChars(value) {\n  return /^[a-zA-Z0-9_-]+$/.test(value) ? undefined : 'contains invalid characters';\n};\nexport var checkIfTrimmed = function checkIfTrimmed(value) {\n  return value.trim() === value ? undefined : 'cannot start or end with whitespace';\n};\nexport var validUrl = function validUrl(value) {\n  try {\n    new URL(value);\n    return undefined;\n  } catch (error) {\n    return 'must be a valid url';\n  }\n};\n\nvar max = function max(len) {\n  return function (value) {\n    return checkMaxLength(value, len);\n  };\n};\n\nvar min = function min(len) {\n  return function (value) {\n    return checkMinLength(value, len);\n  };\n};\n\nvar validChars = function validChars(value) {\n  return checkValidChars(value);\n};\n\nvar trimmed = function trimmed(value) {\n  return checkIfTrimmed(value);\n};\n\nexport var required = function required(value) {\n  return value ? undefined : 'required';\n};\nexport var postType = function postType(value) {\n  return value === 'link' || value === 'text' ? undefined : 'must be link or text post';\n};\nexport var usernameValidator = [required, max(32), validChars, trimmed];\nexport var passwordValidator = [required, min(8), max(72)];\nexport var titleValidator = function titleValidator(value) {\n  return required(value) || checkMaxLength(value, 100);\n};\nexport var textPostValidator = function textPostValidator(value) {\n  return required(value) || checkMinLength(value, 4);\n};\nexport var urlValidator = function urlValidator(value) {\n  return required(value) || validUrl(value);\n};\nexport var typeValidator = function typeValidator(value) {\n  return required(value) || postType(value);\n};","map":{"version":3,"sources":["C:\\Users\\Techdotpk\\Desktop\\client\\src\\util\\validators.js"],"names":["checkMaxLength","value","len","length","undefined","checkMinLength","checkValidChars","test","checkIfTrimmed","trim","validUrl","URL","error","max","min","validChars","trimmed","required","postType","usernameValidator","passwordValidator","titleValidator","textPostValidator","urlValidator","typeValidator"],"mappings":"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","sourcesContent":["export const checkMaxLength = (value, len) =>\n  value && value.length <= len\n    ? undefined\n    : `must be less than ${len} characters`;\n\nexport const checkMinLength = (value, len) =>\n  value && value.length >= len\n    ? undefined\n    : `must be more than ${len} characters`;\n\nexport const checkValidChars = value =>\n  /^[a-zA-Z0-9_-]+$/.test(value) ? undefined : 'contains invalid characters';\n\nexport const checkIfTrimmed = value =>\n  value.trim() === value ? undefined : 'cannot start or end with whitespace';\n\nexport const validUrl = value => {\n  try {\n    new URL(value);\n    return undefined;\n  } catch (error) {\n    return 'must be a valid url';\n  }\n};\n\nconst max = len => value => checkMaxLength(value, len);\nconst min = len => value => checkMinLength(value, len);\nconst validChars = value => checkValidChars(value);\nconst trimmed = value => checkIfTrimmed(value);\n\nexport const required = value => (value ? undefined : 'required');\nexport const postType = value =>\n  value === 'link' || value === 'text'\n    ? undefined\n    : 'must be link or text post';\nexport const usernameValidator = [required, max(32), validChars, trimmed];\nexport const passwordValidator = [required, min(8), max(72)];\nexport const titleValidator = value =>\n  required(value) || checkMaxLength(value, 100);\nexport const textPostValidator = value =>\n  required(value) || checkMinLength(value, 4);\nexport const urlValidator = value => required(value) || validUrl(value);\nexport const typeValidator = value => required(value) || postType(value);\n"]},"metadata":{},"sourceType":"module"}